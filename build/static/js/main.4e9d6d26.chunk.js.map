{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separation","Date","toDateString","url","fetchData","country","a","changeURL","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","lebel","backgroundColor","options","legend","display","title","text","Countries","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","datacovid","setState","this","image","src","coronaImage","alt","CountryPicker","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e9d6d26.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1ykH8\",\"card\":\"Cards_card__xqNsH\",\"infected\":\"Cards_infected__2z6w2\",\"recovered\":\"Cards_recovered__HcCcd\",\"deaths\":\"Cards_deaths__21OAn\"};","import React from 'react';\r\nimport {Card ,CardContent,Typography,Grid, StylesProvider} from '@material-ui/core'\r\nimport CountUP from 'react-countup';\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css';\r\nconst Cards = ({data: {confirmed, recovered,deaths,lastUpdate }}) => {\r\n    console.log(deaths)\r\n    if(!confirmed)\r\n    {\r\n        return 'Loading...'\r\n    }\r\n    if(!deaths)\r\n    {\r\n        return 'Loading...'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUP\r\n                                start ={0}\r\n                                end ={confirmed.value}\r\n                                duration={2.5}\r\n                                separation =','/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                           {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                       \r\n                        <Typography variant=\"h5\" >\r\n                            <CountUP\r\n                                start ={0}\r\n                                end ={recovered.value}\r\n                                duration={2.5}\r\n                                separation =','/>\r\n                        </Typography>\r\n                       \r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            Number of active recoveries of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n               \r\n                        <Typography variant=\"h5\" >\r\n                            <CountUP\r\n                                start ={0}\r\n                                end ={deaths.value}\r\n                                duration={2.5}\r\n                                separation =','/>\r\n                        </Typography>\r\n                  \r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            Number of active death of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeURL = url;\r\nif(country){\r\n    changeURL = `${url}/countries/${country}`;\r\n}\r\n    try{\r\n        const { data: { confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeURL);\r\n        return { confirmed,recovered,deaths,lastUpdate};\r\n       // const responce = await axios.get(url);\r\n       // return responce;\r\n    }\r\n    catch(error)\r\n    {\r\n\r\n    }\r\n}\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const {data} = await axios.get('https://covid19.mathdro.id/api/daily');\r\n        //console.log(data);\r\n        const modifiedData  = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n\r\n        }));\r\n        //console.log(modifiedData);\r\n        return modifiedData;\r\n    }catch(error){\r\n\r\n    }\r\n}\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const {data:{countries}} = await axios.get('https://covid19.mathdro.id/api/countries');\r\n        //console.log(response)\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch (error)\r\n    {\r\n\r\n    }\r\n}","import React ,{useState ,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line , Bar } from 'react-chartjs-2'\r\nimport { StylesProvider } from '@material-ui/core';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) =>{\r\n    const [dailyData,setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart = (\r\n        dailyData.length \r\n        ?(\r\n        <Line\r\n        data ={\r\n        {\r\n            labels: dailyData.map(({date})=>date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed}) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            },{\r\n                \r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n            }],\r\n        }}\r\n        />):null\r\n    );\r\n    console.log(confirmed,recovered,deaths);\r\n    const barChart =(\r\n        confirmed ? (\r\n             <Bar \r\n            data = {{\r\n                \r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    lebel:'People',\r\n                   backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                    data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n        ],\r\n    }}\r\n            options={{\r\n                legend: {display:false},\r\n                title: {display:true,text: `Current status in ${country}`},\r\n            }}\r\n            />\r\n        ):null\r\n    );\r\n    return(\r\n        <div className = {styles.container}>\r\n          \r\n           {country ? barChart :lineChart}\r\n        </div>\r\n       \r\n    );\r\n    };\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React          from 'react'\r\n//import CountryPzicker from './components/CountryPzicker/CountryPzicker'\r\nimport {Cards,Chart,CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/image.png';\r\nclass App extends React.Component{\r\n   state = {\r\n       data: {},\r\n    }\r\n   async componentDidMount() {\r\n        const datacovid = await fetchData();\r\n       //console.log(data);\r\n        this.setState({ data: datacovid});\r\n    }\r\n    handleCountryChange = async (country) => {\r\n        const datacovid = await fetchData(country);\r\n        this.setState({ data: datacovid,country:country});\r\n    }\r\n    render(){\r\n        const {data,country} = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt='COVID-19'/>\r\n               <Cards data = {data}/>\r\n               <CountryPicker  handleCountryChange = {this.handleCountryChange}/>\r\n                <Chart data ={data} country={country}/>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App/>,document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__36wty\",\"image\":\"App_image__3r5Xb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__iZyvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__6-K68\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}